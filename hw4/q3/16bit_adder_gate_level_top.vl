/*
Mark McKelvy
CMPS499: Embedded Software Systems
HW4
 Problem 3. Design for a 16-bit adder.
 Inputs are two 16-bit numbers and a 1-bit carry-in.
 Output is a 16-bit sum and 1-bit carry-out.
 This problem is done at GATE-Level.
*/
module top();

// declare 16-bit numbers, carry in
reg [15:0] A;
reg [15:0] B;
reg cin;

// declare 16-bit sum, carry out
wire [15:0] Sum;
wire [14:0] carry;
wire cout;
   
   
// create a series of adders, linking them together using
// the carryout variables
my_1bit_full_adder_gate_level full_1bit_adder0(A[0], B[0], cin, Sum[0], carry[0]);
my_1bit_full_adder_gate_level full_1bit_adder1(A[1], B[1], carry[0], Sum[1], carry[1]);
my_1bit_full_adder_gate_level full_1bit_adder2(A[2], B[2], carry[1], Sum[2], carry[2]);
my_1bit_full_adder_gate_level full_1bit_adder3(A[3], B[3], carry[2], Sum[3], carry[3]);
my_1bit_full_adder_gate_level full_1bit_adder4(A[4], B[4], carry[3], Sum[4], carry[4]);
my_1bit_full_adder_gate_level full_1bit_adder5(A[5], B[5], carry[4], Sum[5], carry[5]);
my_1bit_full_adder_gate_level full_1bit_adder6(A[6], B[6], carry[5], Sum[6], carry[6]);
my_1bit_full_adder_gate_level full_1bit_adder7(A[7], B[7], carry[6], Sum[7], carry[7]);
my_1bit_full_adder_gate_level full_1bit_adder8(A[8], B[8], carry[7], Sum[8], carry[8]);
my_1bit_full_adder_gate_level full_1bit_adder9(A[9], B[9], carry[8], Sum[9], carry[9]);
my_1bit_full_adder_gate_level full_1bit_adder10(A[10], B[10], carry[9], Sum[10], carry[10]);
my_1bit_full_adder_gate_level full_1bit_adder11(A[11], B[11], carry[10], Sum[11], carry[11]);
my_1bit_full_adder_gate_level full_1bit_adder12(A[12], B[12], carry[11], Sum[12], carry[12]);
my_1bit_full_adder_gate_level full_1bit_adder13(A[13], B[13], carry[12], Sum[13], carry[13]);
my_1bit_full_adder_gate_level full_1bit_adder14(A[14], B[14], carry[13], Sum[14], carry[14]);
my_1bit_full_adder_gate_level full_1bit_adder15(A[15], B[15], carry[14], Sum[15], cout);
   

initial
	begin

	// a series of tests for the adder
	A = 16'b0000000010000000;
	B = 16'b0000000000000001;
	cin = 1'b0;
	
	#10;
	A = 16'b0000000010000000;
	B = 16'b0000000000000001;
	cin = 1'b1;
	
	#10;
	A = 16'b0000000010000001;
	B = 16'b0000000000000001;
	cin = 1'b0;
	
	#10;
	A = 16'b0000000010000001;
	B = 16'b0000000000000001;
	cin = 1'b1;
	
	#10;
	A = 16'b0000000000001111;
	B = 16'b0000000000001111;
	cin = 1'b0;

	#10;
	A = 16'b0000000000001111;
	B = 16'b0000000000001111;
	cin = 1'b1;

	#10;
	A = 16'b0000000000001001;
	B = 16'b0000000000001011;
	cin = 1'b0;

	#10;
	A = 16'b0000000000001001;
	B = 16'b0000000000001011;
	cin = 1'b1;

	#10;
	A = 16'b0000000010101001;
	B = 16'b0000000000101011;
	cin = 1'b0;
		
	#10;
	A = 16'b0000000010101001;
	B = 16'b0000000000101011;
	cin = 1'b1;

	#10;
	A = 16'b0000000010101001;
	B = 16'b0000000010101011;
	cin = 1'b0;

	#10;
	A = 16'b1010100100000000;
	B = 16'b1010101100000000;
	cin = 1'b1;

	#10;
	A = 16'b1010110100000000;
	B = 16'b1011101100000000;
	cin = 1'b0;

	#10;
	A = 16'b1010110100000000;
	B = 16'b1011101100000000;
	cin = 1'b1;

	#10;
	A = 16'b0000000100000000;
	B = 16'b1111111000000000;
	cin = 1'b0;

	#10;
	A = 16'b0000000100000000;
	B = 16'b1111111000000000;
	cin = 1'b1;

	#10;
	A = 16'b0000000100000000;
	B = 16'b1111111100000000;
	cin = 1'b1;

	#10;
	A = 16'b1111111100000000;
	B = 16'b1111111111111111;
	cin = 1'b0;

	#10;
	A = 16'b1111111111111111;
	B = 16'b1111111111111111;
	cin = 1'b1;

	#10;
	$dumpflush;
end

initial
	begin

	// output the results to the monitor
	$monitor("cin\t=\t\t\t%b \na\t=\t%16b \nb\t=\t%16b \nsum\t=\t%16b \ncout\t=\t%b \ntime\t=\t%t\n-----------------------------------", cin, A, B, Sum, cout, $time);
	$dumpfile("top.dump");
	$dumpvars(5, top);
end

endmodule
