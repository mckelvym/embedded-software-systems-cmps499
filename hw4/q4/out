#! /usr/bin/vvp
:vpi_time_precision + 0;
:vpi_module "system";
S_0x819de88 .scope module, "decoder_top" "decoder_top";
 .timescale 0;
V_$0x8197dc8 .var "in", 2, 0;
V_$0x8197e58 .net "out", 7, 0, L_0x81b0230, L_0x81b0470, L_0x81b0530, L_0x81b07c8, L_0x81b0778, L_0x81b0a70, L_0x81b0ba0, L_0x81b0d80;
S_0x819d328 .scope module, "my_super_decoder" "decoder_3_to_8", S_0x819de88;
 .timescale 0;
L_0x819fa98 .functor AND, L_0x819fb28, L_0x81b01b0, C<1>, C<1>;
L_0x819fb28 .functor NOT, V_$0x8197dc8[1], C<0>, C<0>, C<0>;
L_0x81b01b0 .functor NOT, V_$0x8197dc8[2], C<0>, C<0>, C<0>;
L_0x81b0230 .functor AND, L_0x81b02c8, L_0x819fa98, C<1>, C<1>;
L_0x81b02c8 .functor NOT, V_$0x8197dc8[0], C<0>, C<0>, C<0>;
L_0x81b0348 .functor AND, L_0x81b0378, L_0x81b0408, C<1>, C<1>;
L_0x81b0378 .functor NOT, V_$0x8197dc8[1], C<0>, C<0>, C<0>;
L_0x81b0408 .functor NOT, V_$0x8197dc8[2], C<0>, C<0>, C<0>;
L_0x81b0470 .functor AND, V_$0x8197dc8[0], L_0x81b0348, C<1>, C<1>;
L_0x81b0500 .functor AND, L_0x81b0560, L_0x81b05d0, C<1>, C<1>;
L_0x81b0560 .functor NOT, V_$0x8197dc8[0], C<0>, C<0>, C<0>;
L_0x81b05d0 .functor NOT, V_$0x8197dc8[2], C<0>, C<0>, C<0>;
L_0x81b0530 .functor AND, V_$0x8197dc8[1], L_0x81b0500, C<1>, C<1>;
L_0x81b06f8 .functor AND, V_$0x8197dc8[0], V_$0x8197dc8[1], C<1>, C<1>;
L_0x81b07c8 .functor AND, L_0x81b0848, L_0x81b06f8, C<1>, C<1>;
L_0x81b0848 .functor NOT, V_$0x8197dc8[2], C<0>, C<0>, C<0>;
L_0x81b0938 .functor AND, L_0x81b0968, L_0x81b0a18, C<1>, C<1>;
L_0x81b0968 .functor NOT, V_$0x8197dc8[0], C<0>, C<0>, C<0>;
L_0x81b0a18 .functor NOT, V_$0x8197dc8[1], C<0>, C<0>, C<0>;
L_0x81b0778 .functor AND, V_$0x8197dc8[2], L_0x81b0938, C<1>, C<1>;
L_0x81b0728 .functor AND, V_$0x8197dc8[0], L_0x81b09c0, C<1>, C<1>;
L_0x81b09c0 .functor NOT, V_$0x8197dc8[1], C<0>, C<0>, C<0>;
L_0x81b0a70 .functor AND, V_$0x8197dc8[2], L_0x81b0728, C<1>, C<1>;
L_0x81b0cd0 .functor AND, L_0x81b0c70, V_$0x8197dc8[1], C<1>, C<1>;
L_0x81b0c70 .functor NOT, V_$0x8197dc8[0], C<0>, C<0>, C<0>;
L_0x81b0ba0 .functor AND, V_$0x8197dc8[2], L_0x81b0cd0, C<1>, C<1>;
L_0x81b0b18 .functor AND, V_$0x8197dc8[0], V_$0x8197dc8[1], C<1>, C<1>;
L_0x81b0d80 .functor AND, V_$0x8197dc8[2], L_0x81b0b18, C<1>, C<1>;
V_$0x8198198 .net "in", 2, 0, V_$0x8197dc8[0], V_$0x8197dc8[1], V_$0x8197dc8[2];
V_$0x81982c0 .net "out", 7, 0, L_0x81b0230, L_0x81b0470, L_0x81b0530, L_0x81b07c8, L_0x81b0778, L_0x81b0a70, L_0x81b0ba0, L_0x81b0d80;
V_$0x819d820 .net "wires", 7, 0, L_0x819fa98, L_0x81b0348, L_0x81b0500, L_0x81b06f8, L_0x81b0938, L_0x81b0728, L_0x81b0cd0, L_0x81b0b18;
    .scope S_0x819de88;
T_0 ;
    %set/v V_$0x8197dc8[0], 0, 3;
    %delay 10;
    %set V_$0x8197dc8[0], 1;
    %set/v V_$0x8197dc8[1], 0, 2;
    %delay 10;
    %set V_$0x8197dc8[0], 0;
    %set V_$0x8197dc8[1], 1;
    %set V_$0x8197dc8[2], 0;
    %delay 10;
    %set/v V_$0x8197dc8[0], 1, 2;
    %set V_$0x8197dc8[2], 0;
    %delay 10;
    %set/v V_$0x8197dc8[0], 0, 2;
    %set V_$0x8197dc8[2], 1;
    %delay 10;
    %set V_$0x8197dc8[0], 1;
    %set V_$0x8197dc8[1], 0;
    %set V_$0x8197dc8[2], 1;
    %delay 10;
    %set V_$0x8197dc8[0], 0;
    %set/v V_$0x8197dc8[1], 1, 2;
    %delay 10;
    %set/v V_$0x8197dc8[0], 1, 3;
    %delay 10;
    %vpi_call "$dumpflush";
    %end;
    .thread T_0;
    .scope S_0x819de88;
T_1 ;
    %vpi_call "$monitor", "input\t=\t%3b \noutput\t=\t%8b \ntime\t=%t\n\n", V_$0x8197dc8, V_$0x8197e58, $time;
    %end;
    .thread T_1;
